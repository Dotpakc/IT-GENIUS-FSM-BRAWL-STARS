import logging #

from datetime import datetime

from aiogram import Bot, Dispatcher, types, executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

from decouple import config
from utils import *

logging.basicConfig(level=logging.INFO)

API_TOKEN = config('API_TOKEN')


bot = Bot(token=API_TOKEN)

# For example use simple MemoryStorage for Dispatcher.
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


# States
class Regist(StatesGroup):
   tag = State()
   tag_confirm = State()
   name = State()
   birthday = State()
   phone = State()
   location = State()
   email = State()

class Review(StatesGroup):
    text = State()


# ‚öîÔ∏è–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é‚öîÔ∏è
# üíéFree gemsüíé
# üéÅ–ü–æ–¥–∞—Ä–∫–∏üéÅ
# –†—É–ª–µ—Ç–∫–∞
# üìä–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞üìä
# üìù–ü—Ä–∞–≤–∏–ª–∞üìù
# üìû–°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–πüìû
main_menu = types.InlineKeyboardMarkup(row_width=2)
main_menu.row( types.InlineKeyboardButton(text="üíéFree gemsüíé", callback_data="free_gems"),
    types.InlineKeyboardButton(text="üéÅ–ü–æ–¥–∞—Ä–∫–∏üéÅ", callback_data="gifts"))
main_menu.add(types.InlineKeyboardButton(text="üé∞–†—É–ª–µ—Ç–∫–∞üé∞", callback_data="roulette"),
              types.InlineKeyboardButton(text="üìä–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞üìä", callback_data="stats"))
main_menu.row(
    types.InlineKeyboardButton(text="üìù–ü—Ä–∞–≤–∏–ª–∞üìù", callback_data="rules"),
    types.InlineKeyboardButton(text="üìû–°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–πüìû", callback_data="contact_admin")
)
   
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç!\n–Ø –±–æ—Ç –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –ë–†–ê–í–õ –°–¢–ê–†–° CLOUD \n –ü—Ä–æ–π–¥–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏ –ø–æ–ª—É—á–∏ 599 –≥–µ–º–æ–≤ –≤ –ø–æ–¥–∞—Ä–æ–∫!")
    if get_user(message.from_user) is None:
        await message.answer("–°–ª—É—à–∞–π, —Ç—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –¥–∞–≤–∞–π —ç—Ç–æ –∏—Å–ø—Ä–∞–≤–∏–º!")
        await Regist.tag.set()
        await message.answer("–í–≤–µ–¥–∏ —Å–≤–æ–π —Ç–µ–≥ –≤ –ë—Ä–∞–≤–ª –°—Ç–∞—Ä—Å")
    else:
        await message.answer("‚öîÔ∏è------–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é------‚öîÔ∏è", reply_markup=main_menu)


@dp.message_handler(state=Regist.tag)
async def process_tag(message: types.Message, state: FSMContext):
    bw_player = bw_info_by_nickname(message.text)
    if bw_player is None:
        await message.answer("–¢–∞–∫–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —Ç—ã –≤–≤–µ–ª –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–≥, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑")
        return
    
    await state.update_data(tag=message.text) # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–≥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    
    text = f"–¢–≤–æ–π –Ω–∏–∫–Ω–µ–π–º: {bw_player.name}\n–¢–≤–æ–π —Ç–µ–≥: {bw_player.tag}"
    text += f"–£ —Ç–µ–±—è {bw_player.trophies} –∫—É–±–∫–æ–≤\n"
    # if bw_player.club is not None:
    #     text += f"–¢—ã —Å–æ—Å—Ç–æ–∏—à—å –≤ –∫–ª—É–±–µ {bw_player.club.name} —Å {bw_player.club.trophies} –∫—É–±–∫–æ–≤"
    text += "\n–í—Å–µ –≤–µ—Ä–Ω–æ?"
    
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(text="üü¢–î–ê", callback_data="yes"),
                types.InlineKeyboardButton(text="üî¥–ù–ï–¢", callback_data="no"))
    
    await message.answer(text, reply_markup=markup)
    await Regist.next()
    
    
@dp.callback_query_handler(state=Regist.tag_confirm)
async def process_tag_confirm(call: types.CallbackQuery, state: FSMContext):
    if call.data == "yes":
        await call.message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ–µ –ù–∞—Å—Ç–æ—è—â–µ–µ –ò–º—è")
        await Regist.next()
    else:
        await call.message.answer("–í–≤–µ–¥–∏ —Å–≤–æ–π —Ç–µ–≥ –≤ –ë—Ä–∞–≤–ª –°—Ç–∞—Ä—Å")
        await Regist.tag.set()

@dp.message_handler(state=Regist.name)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n–ù–∞–ø—Ä–∏–º–µ—Ä: 30.12.2000")
    await Regist.next()
    
@dp.message_handler(state=Regist.birthday)
async def process_birthday(message: types.Message, state: FSMContext):
    date = datetime.strptime(message.text, '%d.%m.%Y')
    if date is None and date.year < 1950 and date.year > datetime.now().year:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑")
        return
    
    await state.update_data(birthday=message.text)
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True))
    
    text = "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –ø—Ä–æ—Å—Ç–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá"
    
    await message.answer(text, reply_markup=markup)

    await Regist.next()


@dp.message_handler(state=Regist.phone, content_types=types.ContentTypes.CONTACT)
async def process_phone(message: types.Message, state: FSMContext):
    await state.update_data(phone=message.contact.phone_number)
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True))
    
    text = "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –ø—Ä–æ—Å—Ç–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá"
    
    await message.answer(text, reply_markup=markup)

    await Regist.next()
    
    
@dp.message_handler(state=Regist.location, content_types=types.ContentTypes.LOCATION)
async def process_location(message: types.Message, state: FSMContext):
    await state.update_data(location=message.location)
    
    await message.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π email", reply_markup=types.ReplyKeyboardRemove())
    
    await Regist.next()
    


    
@dp.message_handler(state=Regist.email)
async def process_email(message: types.Message, state: FSMContext):
    if not check_email(message.text):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑")
        return
    
    await state.update_data(email=message.text)
    
    data = await state.get_data()
    user_data = crete_user(data, message.from_user)
    
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —Ç—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ")
    
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(text="üíé–ü–æ–ª—É—á–∏—Ç—å –≥–µ–º—ãüíé", callback_data="get_gems"))
    
    await message.answer("–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å 599üíé –≥–µ–º–æ–≤ –≤ –ø–æ–¥–∞—Ä–æ–∫", reply_markup=markup)
    
    await state.finish()
    

@dp.callback_query_handler(lambda c: c.data == "get_gems")
async def process_get_gems(call: types.CallbackQuery):
    code = gen_code_gem()
    await call.message.answer(f"–¢–≤–æ–π –∫–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥–µ–º–æ–≤: {code}")
    await call.message.answer("–û—Ç–ø—Ä–∞–≤—å –æ—Ç–∑—ã–≤ –æ –Ω–∞—à–µ–º –±–æ—Ç–µ –∏ –ø–æ–ª—É—á–∏ 1000üíé –≥–µ–º–æ–≤ –≤ –ø–æ–¥–∞—Ä–æ–∫ üéÅ")
    await call.message.answer("–û—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π –æ—Ç–∑—ã–≤ –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–∞")
    await Review.text.set()
    
@dp.message_handler(state=Review.text)
async def process_review(message: types.Message, state: FSMContext):
    await state.update_data(text=message.text)
    text = "C–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! –¢–≤–æ–∏ 1000üíé –≥–µ–º–æ–≤ —É–∂–µ –Ω–∞ —Ç–≤–æ–µ–º —Å—á–µ—Ç—É"
    user = get_user(message.from_user)
    user['gems'] += 1000
    text += f"\n–¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {user['gems']}üíé"
    await message.answer(text, reply_markup=main_menu)
    await state.finish()






executor.start_polling(dp, skip_updates=True)